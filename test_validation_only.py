#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Execute –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
"""
from standard_open_inflation_package import Execute, Request, Response

def test_execute_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Execute –¥–ª—è MODIFY –∏ ALL"""
    
    def dummy_request_modifier(request: Request) -> Request:
        return request
    
    def dummy_response_modifier(response: Response) -> Response:
        return response
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Execute...")
    
    # –¢–µ—Å—Ç 1: MODIFY —Ç–æ–ª—å–∫–æ —Å request_modify –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        execute1 = Execute.MODIFY(
            request_modify=dummy_request_modifier,
            max_modifications=1
        )
        print("‚úÖ MODIFY —Å —Ç–æ–ª—å–∫–æ request_modify: –£–°–ü–ï–•")
    except Exception as e:
        print(f"‚ùå MODIFY —Å —Ç–æ–ª—å–∫–æ request_modify: –û–®–ò–ë–ö–ê - {e}")
    
    # –¢–µ—Å—Ç 2: MODIFY —Ç–æ–ª—å–∫–æ —Å response_modify –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        execute2 = Execute.MODIFY(
            response_modify=dummy_response_modifier,
            max_modifications=1
        )
        print("‚úÖ MODIFY —Å —Ç–æ–ª—å–∫–æ response_modify: –£–°–ü–ï–•")
    except Exception as e:
        print(f"‚ùå MODIFY —Å —Ç–æ–ª—å–∫–æ response_modify: –û–®–ò–ë–ö–ê - {e}")
    
    # –¢–µ—Å—Ç 3: MODIFY —Å –æ–±–µ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        execute3 = Execute.MODIFY(
            request_modify=dummy_request_modifier,
            response_modify=dummy_response_modifier,
            max_modifications=1
        )
        print("‚úÖ MODIFY —Å –æ–±–µ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: –£–°–ü–ï–•")
    except Exception as e:
        print(f"‚ùå MODIFY —Å –æ–±–µ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: –û–®–ò–ë–ö–ê - {e}")
    
    # –¢–µ—Å—Ç 4: MODIFY –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å
    try:
        execute4 = Execute.MODIFY(max_modifications=1)
        print("‚ùå MODIFY –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π: –ù–ï –î–û–õ–ñ–ï–ù –†–ê–ë–û–¢–ê–¢–¨")
    except Exception as e:
        print(f"‚úÖ MODIFY –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π: –ü–†–ê–í–ò–õ–¨–ù–û –£–ü–ê–õ - {e}")
    
    # –¢–µ—Å—Ç 5: ALL —Ç–æ–ª—å–∫–æ —Å request_modify –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        execute5 = Execute.ALL(
            request_modify=dummy_request_modifier,
            max_modifications=1,
            max_responses=1
        )
        print("‚úÖ ALL —Å —Ç–æ–ª—å–∫–æ request_modify: –£–°–ü–ï–•")
    except Exception as e:
        print(f"‚ùå ALL —Å —Ç–æ–ª—å–∫–æ request_modify: –û–®–ò–ë–ö–ê - {e}")
    
    # –¢–µ—Å—Ç 6: ALL —Ç–æ–ª—å–∫–æ —Å response_modify –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        execute6 = Execute.ALL(
            response_modify=dummy_response_modifier,
            max_modifications=1,
            max_responses=1
        )
        print("‚úÖ ALL —Å —Ç–æ–ª—å–∫–æ response_modify: –£–°–ü–ï–•")
    except Exception as e:
        print(f"‚ùå ALL —Å —Ç–æ–ª—å–∫–æ response_modify: –û–®–ò–ë–ö–ê - {e}")
    
    # –¢–µ—Å—Ç 7: ALL –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å
    try:
        execute7 = Execute.ALL(
            max_modifications=1,
            max_responses=1
        )
        print("‚ùå ALL –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π: –ù–ï –î–û–õ–ñ–ï–ù –†–ê–ë–û–¢–ê–¢–¨")
    except Exception as e:
        print(f"‚úÖ ALL –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π: –ü–†–ê–í–ò–õ–¨–ù–û –£–ü–ê–õ - {e}")

def test_request_modification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ Request"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é Request...")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    from standard_open_inflation_package import HttpMethod
    request = Request(
        url="https://example.com/api",
        method=HttpMethod.GET,
        headers={"User-Agent": "TestAgent"},
        params={"page": "1"}
    )
    
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL: {request.url}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π real_url: {request.real_url}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {request.headers}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {request.params}")
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å (—Ç–µ–ø–µ—Ä—å –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if request.params is None:
        request.params = {}
    if request.headers is None:
        request.headers = {}
        
    request.params["modified"] = "true"
    request.params["timestamp"] = "12345"
    request.headers["X-Modified"] = "true"
    request.headers["Authorization"] = "Bearer token123"
    
    print(f"\n–ü–æ—Å–ª–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    print(f"URL: {request.url}")
    print(f"Real URL: {request.real_url}")
    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {request.headers}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {request.params}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    assert "modified=true" in request.real_url
    assert "timestamp=12345" in request.real_url
    assert request.headers.get("X-Modified") == "true"
    assert request.headers.get("Authorization") == "Bearer token123"
    
    print("‚úÖ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ Request –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def test_response_modification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ Response"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é Response...")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    import json
    test_data = {"data": "test", "status": "ok"}
    response = Response(
        status=200,
        url="https://example.com/api",
        content=json.dumps(test_data).encode('utf-8'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ bytes
        response_headers={"Content-Type": "application/json"},
        request_headers={"User-Agent": "TestAgent"},
        duration=1.5
    )
    
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.response_headers}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.content_parse()}")
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response.response_headers["X-Modified"] = "true"
    response.response_headers["X-Handler"] = "test_handler"
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    parsed_content = response.content_parse()
    if isinstance(parsed_content, dict):
        parsed_content["_intercepted"] = True
        parsed_content["_modification_time"] = "2025-06-15"
        # –û–±–Ω–æ–≤–ª—è–µ–º content —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        response.content = json.dumps(parsed_content).encode('utf-8')
    
    print(f"\n–ü–æ—Å–ª–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.response_headers}")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.content_parse()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    final_content = response.content_parse()
    assert response.response_headers.get("X-Modified") == "true"
    assert response.response_headers.get("X-Handler") == "test_handler"
    if isinstance(final_content, dict):
        assert final_content.get("_intercepted") == True
        assert final_content.get("_modification_time") == "2025-06-15"
        print("‚úÖ JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–∫–∂–µ –±—ã–ª–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ!")
    
    print("‚úÖ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ Response –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    test_execute_validation()
    test_request_modification()
    test_response_modification()
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
