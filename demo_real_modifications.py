#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
import asyncio
from playwright.async_api import async_playwright
from standard_open_inflation_package import NetworkInterceptor, Handler, Execute, Request, Response

async def test_real_modifications():
    """–¢–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    # –ë—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    modifications_log = {
        'original_requests': [],
        'modified_requests': [],
        'original_responses': [],
        'modified_responses': []
    }
    
    def request_modifier(request: Request) -> Request:
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        modifications_log['original_requests'].append({
            'url': request.url,
            'params': dict(request.params) if request.params else {},
            'headers': dict(request.headers) if request.headers else {},
            'method': request.method.value
        })
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request.add_param('modified_by', 'interceptor')
        request.add_param('timestamp', '12345')
        request.add_header('X-Custom-Header', 'test-value')
        request.add_header('X-Intercepted', 'true')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        modifications_log['modified_requests'].append({
            'url': request.real_url,
            'params': dict(request.params) if request.params else {},
            'headers': dict(request.headers) if request.headers else {},
            'method': request.method.value
        })
        
        print(f"üîß REQUEST MODIFIED: {request.url} -> {request.real_url}")
        print(f"   Added params: modified_by=interceptor, timestamp=12345")
        print(f"   Added headers: X-Custom-Header, X-Intercepted")
        
        return request
    
    def response_modifier(response: Response) -> Response:
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç - –∏–∑–º–µ–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
        parsed_content = response.content_parse()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        modifications_log['original_responses'].append({
            'status': response.status,
            'headers': dict(response.response_headers) if response.response_headers else {},
            'url': response.url,
            'content_preview': str(parsed_content)[:100] if parsed_content else None
        })
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response.response_headers['X-Response-Modified'] = 'true'
        response.response_headers['X-Modification-Time'] = '2025-06-15'
        response.response_headers['X-Handler'] = 'response_modifier'
        
        # –ï—Å–ª–∏ —ç—Ç–æ JSON, –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ –∏ –æ–±–Ω–æ–≤–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if isinstance(parsed_content, dict):
            parsed_content['_intercepted'] = True
            parsed_content['_modification_info'] = {
                'modified_by': 'response_modifier',
                'timestamp': '2025-06-15'
            }
            # –û–±–Ω–æ–≤–ª—è–µ–º content —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            import json
            response.content = json.dumps(parsed_content).encode('utf-8')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        modifications_log['modified_responses'].append({
            'status': response.status,
            'headers': dict(response.response_headers) if response.response_headers else {},
            'url': response.url,
            'content_preview': str(response.content_parse())[:100] if response.content else None
        })
        
        print(f"üîß RESPONSE MODIFIED: {response.status} from {response.url}")
        print(f"   Added headers: X-Response-Modified, X-Modification-Time, X-Handler")
        if isinstance(parsed_content, dict):
            print(f"   Added JSON fields: _intercepted, _modification_info")
        
        return response
    
    async with async_playwright() as pw:
        browser = await pw.firefox.launch()
        page = await browser.new_page()
        
        interceptor = NetworkInterceptor(page)
        interceptor._logger.setLevel("DEBUG")
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä —Å –æ–±–µ–∏–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
        handler = Handler.ALL(
            slug="modification_tester",
            execute=Execute.ALL(
                request_modify=request_modifier,
                response_modify=response_modifier,
                max_modifications=3,  # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                max_responses=2       # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤
            )
        )
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        results, _ = await asyncio.gather(
            interceptor.execute(handler),
            page.goto("https://httpbin.org/get?original_param=test")
        )
        
        await browser.close()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print(f"   Handlers completed: {len(results)}")
        print(f"   Original requests logged: {len(modifications_log['original_requests'])}")
        print(f"   Modified requests logged: {len(modifications_log['modified_requests'])}")
        print(f"   Original responses logged: {len(modifications_log['original_responses'])}")
        print(f"   Modified responses logged: {len(modifications_log['modified_responses'])}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô –ó–ê–ü–†–û–°–û–í:")
        for i, (orig, mod) in enumerate(zip(modifications_log['original_requests'], modifications_log['modified_requests'])):
            print(f"   Request #{i+1}:")
            print(f"     Original URL: {orig['url']}")
            print(f"     Modified URL: {mod['url']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            orig_params = set(orig['params'].keys())
            mod_params = set(mod['params'].keys())
            added_params = mod_params - orig_params
            print(f"     Added params: {added_params}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            orig_headers = set(orig['headers'].keys())
            mod_headers = set(mod['headers'].keys())
            added_headers = mod_headers - orig_headers
            print(f"     Added headers: {added_headers}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô –û–¢–í–ï–¢–û–í:")
        for i, (orig, mod) in enumerate(zip(modifications_log['original_responses'], modifications_log['modified_responses'])):
            print(f"   Response #{i+1}:")
            print(f"     URL: {orig['url']}")
            print(f"     Status: {orig['status']} -> {mod['status']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            orig_headers = set(orig['headers'].keys())
            mod_headers = set(mod['headers'].keys())
            added_headers = mod_headers - orig_headers
            print(f"     Added headers: {added_headers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        assert len(modifications_log['modified_requests']) > 0, "–ù–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –±—ã–ª–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ"
        assert len(modifications_log['modified_responses']) > 0, "–ù–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        for mod_req in modifications_log['modified_requests']:
            assert 'modified_by=interceptor' in mod_req['url'], "–ü–∞—Ä–∞–º–µ—Ç—Ä modified_by –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            assert 'timestamp=12345' in mod_req['url'], "–ü–∞—Ä–∞–º–µ—Ç—Ä timestamp –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            assert 'X-Custom-Header' in mod_req['headers'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Custom-Header –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            assert 'X-Intercepted' in mod_req['headers'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Intercepted –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        
        for mod_resp in modifications_log['modified_responses']:
            assert 'X-Response-Modified' in mod_resp['headers'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Response-Modified –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            assert 'X-Modification-Time' in mod_resp['headers'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Modification-Time –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
            assert 'X-Handler' in mod_resp['headers'], "–ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Handler –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        
        print(f"\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"   –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –±—Ä–∞—É–∑–µ—Ä–∞")

if __name__ == "__main__":
    asyncio.run(test_real_modifications())
