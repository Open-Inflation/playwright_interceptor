#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π response –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä
"""
import asyncio
from playwright.async_api import async_playwright
from standard_open_inflation_package import NetworkInterceptor, Handler, Execute, Request, Response

async def test_response_reaches_browser():
    """–¢–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π response –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def response_modifier(response: Response) -> Response:
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç JSON –æ—Ç–≤–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è"""
        print(f"üîß MODIFYING RESPONSE from {response.url}")
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
        parsed_content = response.content_parse()
        
        # –ï—Å–ª–∏ —ç—Ç–æ JSON –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if isinstance(parsed_content, dict):
            parsed_content['INTERCEPTED'] = True
            parsed_content['MODIFICATION_MARKER'] = 'THIS_PROVES_MODIFICATION_WORKS'
            parsed_content['INJECTED_DATA'] = {
                'test_value': 12345,
                'proof': 'Response modification reached browser'
            }
            print(f"   ‚úÖ Added INTERCEPTED=True and MODIFICATION_MARKER to JSON response")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º content —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            import json
            response.content = json.dumps(parsed_content).encode('utf-8')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.response_headers['X-Intercepted'] = 'true'
        response.response_headers['X-Modification-Proof'] = 'MODIFIED_BY_INTERCEPTOR'
        
        return response

    async with async_playwright() as pw:
        browser = await pw.firefox.launch(headless=False)  # –í–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        page = await browser.new_page()
        
        interceptor = NetworkInterceptor(page)
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ —Å response_modify
        handler = Handler.ALL(
            slug="response_tester",
            execute=Execute.ALL(
                response_modify=response_modifier,
                max_modifications=5,
                max_responses=1
            )
        )
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤...")
        print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ httpbin.org/get –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        results, _ = await asyncio.gather(
            interceptor.execute(handler),
            page.goto("https://httpbin.org/get")
        )
        
        print(f"\nüìä Handler –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∏—Ç –±—Ä–∞—É–∑–µ—Ä/JavaScript
        print("\nüîç –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –í–ò–î–ò–¢ –ë–†–ê–£–ó–ï–†:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –±—Ä–∞—É–∑–µ—Ä
        page_content = await page.content()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –≤ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if 'INTERCEPTED' in page_content:
            print("   ‚úÖ INTERCEPTED –Ω–∞–π–¥–µ–Ω –≤ HTML - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—à–ª–∞ –¥–æ –±—Ä–∞—É–∑–µ—Ä–∞!")
        else:
            print("   ‚ùå INTERCEPTED –ù–ï –Ω–∞–π–¥–µ–Ω –≤ HTML - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï –¥–æ—à–ª–∞")
            
        if 'MODIFICATION_MARKER' in page_content:
            print("   ‚úÖ MODIFICATION_MARKER –Ω–∞–π–¥–µ–Ω –≤ HTML - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—à–ª–∞!")
        else:
            print("   ‚ùå MODIFICATION_MARKER –ù–ï –Ω–∞–π–¥–µ–Ω –≤ HTML - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï –¥–æ—à–ª–∞")
            
        if 'THIS_PROVES_MODIFICATION_WORKS' in page_content:
            print("   ‚úÖ –ú–∞—Ä–∫–µ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—à–ª–∞!")
        else:
            print("   ‚ùå –ú–∞—Ä–∫–µ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ù–ï –Ω–∞–π–¥–µ–Ω - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï –¥–æ—à–ª–∞")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ JSON –¥–∞–Ω–Ω—ã–º
        try:
            js_result = await page.evaluate("""
                () => {
                    // –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    const preElements = document.querySelectorAll('pre');
                    for (let pre of preElements) {
                        try {
                            const data = JSON.parse(pre.textContent);
                            return {
                                found_intercepted: 'INTERCEPTED' in data,
                                found_marker: 'MODIFICATION_MARKER' in data,
                                intercepted_value: data.INTERCEPTED,
                                marker_value: data.MODIFICATION_MARKER,
                                injected_data: data.INJECTED_DATA || null,
                                full_json: data
                            };
                        } catch (e) {
                            continue;
                        }
                    }
                    return { error: 'JSON not found' };
                }
            """)
            
            print(f"\nüîç JAVASCRIPT –ê–ù–ê–õ–ò–ó:")
            if 'error' in js_result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {js_result['error']}")
            else:
                print(f"   INTERCEPTED –Ω–∞–π–¥–µ–Ω: {js_result.get('found_intercepted', False)}")
                print(f"   MODIFICATION_MARKER –Ω–∞–π–¥–µ–Ω: {js_result.get('found_marker', False)}")
                print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ INTERCEPTED: {js_result.get('intercepted_value')}")
                print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ MARKER: {js_result.get('marker_value')}")
                print(f"   Injected data: {js_result.get('injected_data')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if js_result.get('found_intercepted') and js_result.get('intercepted_value') == True:
                    print("   ‚úÖ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û: –ü–æ–ª–µ INTERCEPTED=True –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JavaScript!")
                    
                if js_result.get('found_marker') and js_result.get('marker_value') == 'THIS_PROVES_MODIFICATION_WORKS':
                    print("   ‚úÖ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û: –ú–∞—Ä–∫–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ JavaScript!")
                    
                if js_result.get('injected_data') and js_result['injected_data'].get('test_value') == 12345:
                    print("   ‚úÖ –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û: Injected data –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript!")
                    
        except Exception as e:
            print(f"   ‚ùå JavaScript –æ—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–û–õ–û–í–ö–û–í:")
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ JavaScript –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers_result = await page.evaluate("""
                async () => {
                    try {
                        const response = await fetch('/get');
                        const headers = {};
                        for (let [key, value] of response.headers) {
                            headers[key] = value;
                        }
                        return headers;
                    } catch (e) {
                        return { error: e.message };
                    }
                }
            """)
            
            if 'x-intercepted' in headers_result:
                print(f"   ‚úÖ X-Intercepted –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω: {headers_result['x-intercepted']}")
            else:
                print(f"   ‚ùå X-Intercepted –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω")
                
            if 'x-modification-proof' in headers_result:
                print(f"   ‚úÖ X-Modification-Proof –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω: {headers_result['x-modification-proof']}")
            else:
                print(f"   ‚ùå X-Modification-Proof –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        print(f"\n‚è±Ô∏è  –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞...")
        await asyncio.sleep(3)
        
        await browser.close()
        
        print(f"\nüìã –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ assert'—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        assert 'INTERCEPTED' in page_content, "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï –¥–æ—Å—Ç–∏–≥–ª–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - INTERCEPTED –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML"
        assert 'MODIFICATION_MARKER' in page_content, "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï –¥–æ—Å—Ç–∏–≥–ª–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - MODIFICATION_MARKER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML"
        assert 'THIS_PROVES_MODIFICATION_WORKS' in page_content, "–ú–∞—Ä–∫–µ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ HTML"
        
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò!")
        print("‚úÖ –î–û–ö–ê–ó–ê–ù–û: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π response –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä!")
        print("‚úÖ JavaScript –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –Ω–∞—à–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
        print("‚úÖ HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")

if __name__ == "__main__":
    asyncio.run(test_response_reaches_browser())
